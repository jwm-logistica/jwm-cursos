// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String @db.VarChar(100)
  password String
  imageUrl String
  lessonsHistory LessonsHistory[]
  courses CoursesOnUsers[]
  testsResults TestsResults[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.Text
  imageUrl String?
  users CoursesOnUsers[]
  chapters Chapters[]
}

model CoursesOnUsers {
  courses Courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId Int
  users Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  progress Int
  assignedAt DateTime @default(now())

  @@id([courseId, userId])
  @@unique([courseId, userId])
}

model Chapters {
  number Int @default(autoincrement())
  name String @db.VarChar(100)
  title String
  description String? @db.MediumText
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId Int
  lessons Lessons[]

  @@id([number, courseId])
  @@unique([number, courseId])
}

model LessonsHistory {
  completed Boolean @default(false)
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  lesson Lessons @relation(fields: [lessonNumber, chapterNumber], references: [number, chapterNumber], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int
  chapterNumber Int
  createdAt DateTime @default(now())

  @@id([userId, lessonNumber])
  @@unique([userId, lessonNumber])
}

model Lessons {
  number Int @default(autoincrement())
  name String @db.VarChar(100)
  type LessonType @default(VIDEO)
  durationMinutes Int?
  videoUrl String?
  chapter Chapters @relation(fields: [chapterNumber, courseId], references: [number, courseId], onDelete: Cascade, onUpdate: Cascade)
  chapterNumber Int
  courseId Int
  questions Questions[]
  lessonsHistory LessonsHistory[]
  testsResults TestsResults[]

  @@id([number, chapterNumber])
  @@unique([number, chapterNumber])
}

enum LessonType {
  VIDEO
  TEST
}

model Questions { 
  number Int @default(autoincrement())
  text String @db.MediumText
  alternatives Alternatives []
  lesson Lessons @relation(fields: [lessonNumber, chapterNumber], references: [number, chapterNumber], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int
  chapterNumber Int

  @@id([number, lessonNumber])
  @@unique([number, lessonNumber])
}

model Alternatives {
  number Int @default(autoincrement())
  text String @db.Text
  correctAnswer Boolean
  question Questions @relation(fields: [questionNumber, lessonNumber], references: [number, lessonNumber], onDelete: Cascade, onUpdate: Cascade)
  questionNumber Int
  lessonNumber Int

  @@id([number, questionNumber])
  @@unique([number, questionNumber])
}

model TestsResults {
  correctAnswers Int
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  lesson Lessons @relation(fields: [lessonNumber, chapterNumber], references: [number, chapterNumber], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int
  chapterNumber Int

  @@id([userId, lessonNumber])
  @@unique([userId, lessonNumber])
}