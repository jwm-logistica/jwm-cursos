// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id    Int     @id @default(autoincrement())
  login String  @unique
  name  String @db.VarChar(100)
  password String
  imageUrl String?
  lessonsHistory lessonshistory[]
  courses coursesonusers[]
  testsResults testsresults[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model courses {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.Text
  imageUrl String?
  users coursesonusers[]
  chapters chapters[]
}

model coursesonusers {
  courses courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId Int
  users users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  progress Int
  average Int @default(0)
  assignedAt DateTime @default(now())

  @@id([courseId, userId])
  @@unique([courseId, userId])
}

model chapters {
  number Int @id @unique @default(autoincrement())
  name String @db.VarChar(100)
  title String
  description String? @db.MediumText
  course courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId Int
  lessons lessons[]
}

model lessonshistory {
  completed Boolean @default(false)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  lesson lessons @relation(fields: [lessonNumber], references: [number], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int
  updatedAt DateTime @updatedAt

  @@id([userId, lessonNumber])
  @@unique([userId, lessonNumber])
}

model lessons {
  number Int @id @unique @default(autoincrement())
  name String @db.VarChar(100)
  type LessonType @default(VIDEO)
  durationMinutes Int?
  videoUrl String?
  chapter chapters @relation(fields: [chapterNumber], references: [number], onDelete: Cascade, onUpdate: Cascade)
  chapterNumber Int
  questions questions[]
  lessonsHistory lessonshistory[]
  testsResults testsresults[]
}

enum LessonType {
  VIDEO
  TEST
}

model questions { 
  number Int @id @unique @default(autoincrement())
  text String @db.MediumText
  alternatives alternatives []
  lesson lessons @relation(fields: [lessonNumber], references: [number], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int
}

model alternatives {
  number Int @id @unique @default(autoincrement())
  text String @db.Text
  correctAnswer Boolean
  question questions @relation(fields: [questionNumber], references: [number], onDelete: Cascade, onUpdate: Cascade)
  questionNumber Int
}

model testsresults {
  correctAnswers Int
  user users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  lesson lessons @relation(fields: [lessonNumber], references: [number], onDelete: Cascade, onUpdate: Cascade)
  lessonNumber Int

  @@id([userId, lessonNumber])
  @@unique([userId, lessonNumber])
}